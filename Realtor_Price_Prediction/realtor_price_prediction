import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the dataset
data = pd.read_csv('realtor-data-sample.csv')

# Remove rows with missing values in the target variable 'price' and selected features
data = data.dropna(subset=['price', 'bed', 'bath', 'acre_lot', 'city'])

# Define the features and target variable
X = data[['bed', 'bath', 'acre_lot', 'city']]
y = data['price']

# Define categorical features for one-hot encoding
categorical_features = ['city']
onehot_encoder = OneHotEncoder(handle_unknown='ignore')

# Create a column transformer to handle the categorical variable
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', onehot_encoder, categorical_features)
    ],
    remainder='passthrough'
)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a pipeline with preprocessing and the regression model
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', LinearRegression())])

# Fit the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Extracting feature names after one-hot encoding
one_hot_encoder = model.named_steps['preprocessor'].named_transformers_['cat']
encoded_feature_names = one_hot_encoder.get_feature_names_out(input_features=categorical_features)
all_feature_names = list(encoded_feature_names) + ['bed', 'bath', 'acre_lot']

# Extracting coefficients
coefficients = model.named_steps['regressor'].coef_

# Matching coefficients to features
feature_coefficients = pd.DataFrame(zip(all_feature_names, coefficients), columns=['Feature', 'Coefficient'])

# Sorting the features by the absolute value of their coefficient
feature_coefficients.sort_values(by='Coefficient', key=abs, ascending=False, inplace=True)

# Displaying the feature coefficients
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')
print(feature_coefficients)